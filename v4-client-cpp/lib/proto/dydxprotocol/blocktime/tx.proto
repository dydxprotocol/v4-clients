syntax = "proto3";
package dydxprotocol.blocktime;

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/blocktime/types";

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "google/protobuf/duration.proto";
import "dydxprotocol/blocktime/params.proto";
import "gogoproto/gogo.proto";

// Msg defines the Msg service.
service Msg {
  // UpdateDowntimeParams updates the DowntimeParams in state.
  rpc UpdateDowntimeParams(MsgUpdateDowntimeParams)
      returns (MsgUpdateDowntimeParamsResponse);

  // IsDelayedBlock indicates a significant difference between wall time and the
  // time of the proposed block.
  rpc IsDelayedBlock(MsgIsDelayedBlock) returns (MsgIsDelayedBlockResponse);
}

// MsgUpdateDowntimeParams is the Msg/UpdateDowntimeParams request type.
message MsgUpdateDowntimeParams {
  // The address that controls the module.
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Defines the parameters to update. All parameters must be supplied.
  DowntimeParams params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateDowntimeParamsResponse is the Msg/UpdateDowntimeParams response
// type.
message MsgUpdateDowntimeParamsResponse {}

// MsgIsDelayedBlock is the Msg/IsDelayedBlock request type.
message MsgIsDelayedBlock {
  // The duration that the block is delayed by.
  // This value could possibly be negative in rare cases.
  google.protobuf.Duration delay_duration = 1
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];
}

// MsgIsDelayedBlock is the Msg/IsDelayedBlock response type.
message MsgIsDelayedBlockResponse {}
